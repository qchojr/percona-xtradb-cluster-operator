#!/bin/bash

set -o errexit
set -o xtrace

test_dir=$(realpath $(dirname $0))
. ${test_dir}/../functions

create_namespace $namespace
deploy_operator

desc 'create first PXC cluster'
cluster="some-name-pxc"
kubectl apply \
    -f $conf_dir/secrets.yml \
    -f $conf_dir/$cluster.yml \
    -f $conf_dir/client.yml
desc 'check if all 3 Pods started'
wait_for_running "$cluster-proxysql" 1
wait_for_running "$cluster-node" 3

desc 'write data'
run_mysql \
    'CREATE DATABASE IF NOT EXISTS myApp; use myApp; CREATE TABLE IF NOT EXISTS myApp (id int PRIMARY KEY);' \
    "-h $cluster-proxysql -uroot -proot_password"
run_mysql \
    'INSERT myApp.myApp (id) VALUES (100500)' \
    "-h $cluster-proxysql -uroot -proot_password"
compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h $cluster-node-0.$cluster-nodes -uroot -proot_password"
compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h $cluster-node-1.$cluster-nodes -uroot -proot_password"
compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h $cluster-node-2.$cluster-nodes -uroot -proot_password"

desc 'make backup'
backup1=on-demand-backup1
kubectl apply \
        -f $test_dir/conf/$backup1.yml
wait_backup $backup1

desc 'check backup file md5sum'
kubectl apply \
    -f $test_dir/conf/client.yml
sleep 10
bak_client_pod=$(
    kubectl get pods \
        --selector=name=backup-client \
        -o 'jsonpath={.items[].metadata.name}'
)
wait_pod $bak_client_pod
kubectl exec $bak_client_pod -- \
    bash -c "cd /backup; md5sum -c md5sum.txt"
kubectl delete \
    -f $test_dir/conf/client.yml

desc 'write data after backup'
run_mysql \
    'INSERT myApp.myApp (id) VALUES (100501)' \
    "-h $cluster-proxysql -uroot -proot_password"
compare_mysql_cmd "select-2" "SELECT * from myApp.myApp;" "-h $cluster-node-0.$cluster-nodes -uroot -proot_password"
compare_mysql_cmd "select-2" "SELECT * from myApp.myApp;" "-h $cluster-node-1.$cluster-nodes -uroot -proot_password"
compare_mysql_cmd "select-2" "SELECT * from myApp.myApp;" "-h $cluster-node-2.$cluster-nodes -uroot -proot_password"

kubectl get pods
desc 'recover backup'
echo y | $src_dir/deploy/backup/restore-backup.sh $backup1 ${cluster%-pxc}
kubectl logs job/xtrabackup-restore-job-${cluster%-pxc}
kubectl delete job/xtrabackup-restore-job-${cluster%-pxc}
wait_for_running "$cluster-proxysql" 1
wait_for_running "$cluster-node" 3
kubectl get pods

desc 'check data after backup'
compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h $cluster-node-0.$cluster-nodes -uroot -proot_password"
compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h $cluster-node-1.$cluster-nodes -uroot -proot_password"
compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h $cluster-node-2.$cluster-nodes -uroot -proot_password"
run_mysql \
    'INSERT myApp.myApp (id) VALUES (100501)' \
    "-h $cluster-proxysql -uroot -proot_password"
compare_mysql_cmd "select-2" "SELECT * from myApp.myApp;" "-h $cluster-node-0.$cluster-nodes -uroot -proot_password"
compare_mysql_cmd "select-2" "SELECT * from myApp.myApp;" "-h $cluster-node-1.$cluster-nodes -uroot -proot_password"
compare_mysql_cmd "select-2" "SELECT * from myApp.myApp;" "-h $cluster-node-2.$cluster-nodes -uroot -proot_password"

desc 'copy backup'
$src_dir/deploy/backup/copy-backup.sh $backup1 $tmp_dir/backup

destroy $namespace
